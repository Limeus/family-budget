/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.limeus.expenseservice.api;

import com.limeus.expenseservice.dto.CreateExpenseRequest;
import org.springframework.format.annotation.DateTimeFormat;
import com.limeus.expenseservice.dto.ExpenseResponse;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.limeus.expenseservice.dto.UpdateExpenseRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "expense", description = "the expense API")
public interface ExpenseApi {

    /**
     * POST /v1/expense : Create a new expense
     * Create a new expense for the current user.
     *
     * @param createExpenseRequest  (required)
     * @return The expense has been created successfully. (status code 201)
     *         or Bad request (e.g., invalid input). (status code 400)
     *         or Unauthorized (missing or invalid JWT). (status code 401)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "createExpense",
        summary = "Create a new expense",
        description = "Create a new expense for the current user.",
        tags = { "expense" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The expense has been created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExpenseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request (e.g., invalid input)."),
            @ApiResponse(responseCode = "401", description = "Unauthorized (missing or invalid JWT)."),
            @ApiResponse(responseCode = "500", description = "Server error.")
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/expense",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ExpenseResponse> createExpense(
        @Parameter(name = "CreateExpenseRequest", description = "", required = true) @Valid @RequestBody CreateExpenseRequest createExpenseRequest
    );


    /**
     * DELETE /v1/expense/{id} : Delete an expense
     * Delete an expense.
     *
     * @param id The ID of the expense to retrieve. (required)
     * @return The expense has been deleted successfully. (status code 204)
     *         or Unauthorized (missing or invalid JWT). (status code 401)
     *         or Expense not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "deleteExpense",
        summary = "Delete an expense",
        description = "Delete an expense.",
        tags = { "expense" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The expense has been deleted successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthorized (missing or invalid JWT)."),
            @ApiResponse(responseCode = "404", description = "Expense not found."),
            @ApiResponse(responseCode = "500", description = "Server error.")
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/expense/{id}"
    )
    
    ResponseEntity<Void> deleteExpense(
        @Parameter(name = "id", description = "The ID of the expense to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /v1/expense/{id} : Get expense by ID
     * Get details of a specific expense by its ID.
     *
     * @param id The ID of the expense to retrieve. (required)
     * @return The expense has been found. (status code 200)
     *         or Unauthorized (missing or invalid JWT). (status code 401)
     *         or Expense not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "getExpenseById",
        summary = "Get expense by ID",
        description = "Get details of a specific expense by its ID.",
        tags = { "expense" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The expense has been found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExpenseResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (missing or invalid JWT)."),
            @ApiResponse(responseCode = "404", description = "Expense not found."),
            @ApiResponse(responseCode = "500", description = "Server error.")
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/expense/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ExpenseResponse> getExpenseById(
        @Parameter(name = "id", description = "The ID of the expense to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /v1/expense : Get expenses
     * Get a list of expenses for the current user or the whole family
     *
     * @param expenseScope Specifies whose expenses to display. \&quot;user\&quot; — expenses of the current user only, \&quot;family\&quot; — expenses of the whole family. (optional, default to user)
     * @param fromDate Filter expenses from this date (inclusive). (optional)
     * @param toDate Filter expenses up to this date (inclusive). (optional)
     * @param category Filter expenses by this category. (optional)
     * @return The list of expenses has been found (status code 200)
     *         or Ошибка в запросе (например, неправильный параметр) (status code 400)
     *         or Неавторизованный доступ (отсутствует или неверен JWT) (status code 401)
     *         or Не найдены расходы для запрашиваемого пользователя или семьи (status code 404)
     *         or Ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "getExpenses",
        summary = "Get expenses",
        description = "Get a list of expenses for the current user or the whole family",
        tags = { "expense" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of expenses has been found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ExpenseResponse.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Ошибка в запросе (например, неправильный параметр)"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ (отсутствует или неверен JWT)"),
            @ApiResponse(responseCode = "404", description = "Не найдены расходы для запрашиваемого пользователя или семьи"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера")
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/expense",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ExpenseResponse>> getExpenses(
        @Parameter(name = "expenseScope", description = "Specifies whose expenses to display. \"user\" — expenses of the current user only, \"family\" — expenses of the whole family.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expenseScope", required = false, defaultValue = "user") String expenseScope,
        @Parameter(name = "fromDate", description = "Filter expenses from this date (inclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime fromDate,
        @Parameter(name = "toDate", description = "Filter expenses up to this date (inclusive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "toDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime toDate,
        @Parameter(name = "category", description = "Filter expenses by this category.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category
    );


    /**
     * PUT /v1/expense/{id} : Update an existing expense
     * Update an existing expense.
     *
     * @param id The ID of the expense to retrieve. (required)
     * @param updateExpenseRequest  (required)
     * @return The expense has been updated successfully. (status code 200)
     *         or Bad request (e.g., invalid input). (status code 400)
     *         or Unauthorized (missing or invalid JWT). (status code 401)
     *         or Expense not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "updateExpense",
        summary = "Update an existing expense",
        description = "Update an existing expense.",
        tags = { "expense" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The expense has been updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExpenseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request (e.g., invalid input)."),
            @ApiResponse(responseCode = "401", description = "Unauthorized (missing or invalid JWT)."),
            @ApiResponse(responseCode = "404", description = "Expense not found."),
            @ApiResponse(responseCode = "500", description = "Server error.")
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/expense/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ExpenseResponse> updateExpense(
        @Parameter(name = "id", description = "The ID of the expense to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateExpenseRequest", description = "", required = true) @Valid @RequestBody UpdateExpenseRequest updateExpenseRequest
    );

}
